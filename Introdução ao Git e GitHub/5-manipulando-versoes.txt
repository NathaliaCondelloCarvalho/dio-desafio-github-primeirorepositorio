# Manipulando versões

Chegou a hora de você pôr em prática o que foi visto na aula. Para isso, execute os passos listados abaixo.

------

\1) Na pasta que representa o seu projeto, faça uma alteração qualquer no arquivo **index.html**;

\2) Execute o `git status` e veja que há uma alteração para adicionar;

\3) Execute o comando `git checkout -- index.html`. Confira se sua alteração foi desfeita;

\4) Novamente, faça alguma alteração no arquivo **index.html**;

\5) Execute o comando `git add index.html`;

\6) Execute o comando `git reset HEAD index.html` para trazer o arquivo **index.html** de volta para a `HEAD` do projeto (remover do `stage`, que é o que será enviado para o `commit`);

\7) Repita o passo 3;

\8) Faça mais uma vez alguma alteração no código;

\9) Execute o comando `git add index.html` e o comando `git commit -m "Alterando o código"` para realizar um `commit`;

\10) Execute o comando `git log` e copie o `hash` deste *commit* recém criado;

\11) Rode o comando `git revert {hash}`, substituindo `{hash}` pelo *hash* que você copiou anteriormente;

\12) Confira que suas alterações foram desfeitas;

\13) Mude o nome do curso de Ansible para "Ansible: Infraestrutura como código";

\14) Execute o comando `git stash` para salvar estas alterações na `stash`;

\15) Altere o nome do curso de Kubernetes para "Kubernetes: Introdução a orquestração de containers";

\16) Execute o comando `git add index.html` e o comando `git commit -m "Alterando o nome do curso de Kubernetes"` para realizar um *commit*;

\17) Execute o comando `git stash pop` para trazer a última alteração da *stash*;

\18) Execute o comando `git add index.html` e o comando `git commit -m "Alterando o nome do curso de Ansible"` para realizar um *commit*;

\19) Execute o comando `git push local master` para enviar todas as suas alterações;

\20) Execute o comando `git log --oneline` para ver os *commits* de forma resumida. Copie o *hash* do *commit* de `merge` com a *branch* `lista`;

\21) Execute o comando `git checkout {hash}` substituindo `{hash}` pelo *hash* que você copiou;

\22) Veja que diversas alterações não estão mais presentes;

\23) Execute `git checkout master` para voltar à linha principal de desenvolvimento.



## Nesta aula, aprendemos:

- Que o Git pode nos ajudar a desfazer alterações que não vamos utilizar;

- Que, para desfazer uma alteração antes de adicioná-la para `commit` (com `git add`), podemos utilizar o comando `git checkout -- <arquivos>`;

- Que, para desfazer uma alteração após adicioná-la para `commit`, antes precisamos executar o `git reset HEAD <arquivos>` e depois podemos desfazê-las com `git checkout -- <arquivos>`;

- Que, para revertermos as alterações realizadas em um `commit`, o comando `git revert` pode ser a solução;

- Que o comando `git revert` gera um novo `commit` informando que alterações foram desfeitas;

- Que, para guardar um trabalho para retomá-lo posteriormente, podemos utilizar o `git stash`;

- Que, para visualizar quais alterações estão na `stash`, podemos utilizar o comando `git stash list`;

- Que, com o comando `git stash apply <numero>`, podemos aplicar uma alteração específica da `stash`;

- Que o comando `git stash drop <numero>` remove determinado item da `stash`;

- Que o comando `git stash pop` aplica e remove a última alteração que foi adicionada na `stash`;

- Que o

   

  ```
  git checkout
  ```

   

  serve para deixar a cópia do código da nossa aplicação no estado que desejarmos:

  - `git checkout <branch>` deixa o código no estado de uma `branch` com o nome `<branch>`;
  - `git checkout <hash>` deixa o código no estado do *commit* com o hash `<hash>`.